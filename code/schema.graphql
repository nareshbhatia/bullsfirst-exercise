scalar DateTime

enum Side {
  BUY
  SELL
}

enum Direction {
  IN
  OUT
}

enum OrderType {
  MARKET
  LIMIT
}

enum OrderStatus {
  NEW
  PLACED
  EXECUTED
  CANCELED
}

enum TransactionType {
  CASH_TRANSFER
  TRADE
}

type DataPoint {
  x: Float!
  y: Float!
}

type Series {
  name: String!
  data: [DataPoint!]!
}

type User {
  id: ID!
  email: String!
  name: String!
}

type UserInfo {
  user: User!
  accessToken: String!
}

input SignUpInput {
  email: String!
  name: String!
  password: String!
}

input Credentials {
  email: String!
  password: String!
}

input TransferCashInput {
  accountId: ID!
  direction: Direction!
  amount: Float!
}

input OrderInput {
  accountId: ID!
  side: Side!
  symbol: ID!
  quantity: Int!
  type: OrderType!
  limitPrice: Float
}

type Security {
  id: ID!
  name: String!
  price: Float!
}

type AssetAllocation {
  categoryId: String!
  categoryName: String!
  value: Float!
  percentage: Float!
  children: [AssetAllocation!]
}

type Account {
  id: ID!
  name: String!
  owner: User!
  cashBalance: Float!
  holdings: [Holding!]!
  orders: [Order!]!
  transactions: [Transaction!]!
  investmentTotal: Float!
  assetAllocations: [AssetAllocation!]!
  performance: [Series!]!
}

type Holding {
  id: ID!
  security: Security!
  quantity: Int!
  account: Account!
  value: Float!
}

type Order {
  id: ID!
  side: Side!
  security: Security!
  quantity: Int!
  type: OrderType!
  limitPrice: Float
  status: OrderStatus!
  account: Account!
  createdAt: DateTime!
  createdBy: ID!
}

type CashTransfer {
  id: ID!
  type: TransactionType!
  account: Account!
  createdAt: DateTime!
  createdBy: ID!
  direction: Direction!
  amount: Float!
}

type Trade {
  id: ID!
  type: TransactionType!
  account: Account!
  createdAt: DateTime!
  createdBy: ID!
  side: Side!
  security: Security!
  quantity: Int!
  price: Float!
  amount: Float!
}

union Transaction = CashTransfer | Trade

type Query {
  "returns the user identified by the access token in the request header"
  user: User!

  "returns all securities whose id or name matches the query string"
  securities(query: String!): [Security!]!

  "returns the accounts owned by the requesting user"
  accounts: [Account!]!

  "returns the account with the specified accountId"
  account(accountId: ID!): Account

  "returns the holdings for the specified account"
  holdings(accountId: ID!): [Holding!]!

  "returns the orders for the specified account"
  orders(accountId: ID!): [Order!]!

  "returns the transactions for the specified account"
  transactions(accountId: ID!): [Transaction!]!
}

type Mutation {
  "signs in the user with the specified credentials and returns an access token for future requests"
  signIn(credentials: Credentials!): UserInfo!

  "signs up a new user and returns an access token for future requests"
  signUp(signUpInput: SignUpInput!): UserInfo!

  "invalidates the access token that was used to sign in and returns it"
  signOut: String!

  "transfers cash in or out of an account"
  transferCash(transferCashInput: TransferCashInput!): CashTransfer!

  "place a buy or sell order for a security"
  placeOrder(orderInput: OrderInput!): Order!
}
